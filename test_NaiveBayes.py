from unittest import TestCase
import numpy as np
from sklearn.naive_bayes import MultinomialNB


class TestNaiveBayes(TestCase):
    def test_predict(self):
        X = np.array([[2, 2, 0, 2, 2, 0, 3, 0, 4, 2, 4, 0, 3, 4, 2, 3, 2, 4, 4, 3, 4, 3,
                       1, 4, 2, 0, 3, 0, 1, 3, 4, 2, 0, 0, 3, 3, 1, 2, 0, 0, 2, 4, 1, 1,
                       2, 1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 2, 0, 3, 1, 2, 2, 2, 2, 2, 3, 1,
                       4, 2, 2, 4, 2, 2, 2, 4, 4, 3, 2, 2, 1, 2, 2, 2, 4, 2, 0, 0, 2, 1,
                       3, 0, 4, 3, 2, 3, 3, 3, 1, 2, 2, 0],
                      [1, 3, 2, 3, 1, 2, 1, 2, 4, 0, 2, 4, 0, 1, 3, 1, 2, 0, 4, 3, 2, 2,
                       4, 3, 3, 0, 3, 2, 4, 2, 3, 2, 2, 4, 3, 4, 3, 2, 4, 2, 2, 2, 4, 0,
                       0, 3, 1, 3, 4, 0, 2, 0, 2, 1, 4, 1, 3, 4, 3, 2, 4, 2, 0, 1, 4, 2,
                       3, 3, 2, 1, 1, 1, 1, 1, 1, 0, 4, 2, 3, 0, 1, 2, 0, 2, 3, 2, 1, 2,
                       0, 0, 0, 0, 2, 0, 3, 3, 3, 2, 4, 2],
                      [0, 4, 4, 1, 4, 4, 3, 2, 1, 1, 4, 1, 0, 3, 3, 2, 3, 0, 0, 3, 3, 2,
                       3, 2, 4, 0, 0, 4, 0, 3, 2, 3, 2, 1, 3, 1, 0, 3, 2, 0, 1, 3, 3, 4,
                       2, 2, 3, 0, 0, 1, 2, 2, 3, 0, 1, 1, 0, 1, 0, 3, 3, 0, 4, 2, 4, 3,
                       4, 3, 2, 2, 4, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 1, 1, 1, 3, 3, 4, 2,
                       3, 1, 4, 3, 3, 4, 3, 4, 2, 0, 1, 0],
                      [0, 0, 1, 4, 4, 3, 0, 2, 2, 1, 3, 4, 3, 2, 1, 2, 1, 4, 4, 1, 1, 1,
                       1, 4, 0, 2, 4, 4, 1, 0, 4, 3, 4, 2, 3, 2, 3, 3, 4, 0, 0, 3, 4, 0,
                       4, 1, 1, 0, 0, 2, 3, 3, 4, 3, 1, 2, 2, 0, 4, 3, 4, 3, 2, 2, 1, 2,
                       2, 0, 3, 1, 2, 3, 3, 2, 1, 3, 1, 1, 2, 2, 3, 0, 0, 2, 4, 2, 3, 3,
                       4, 1, 0, 4, 4, 2, 4, 2, 2, 1, 0, 3],
                      [4, 4, 2, 3, 3, 2, 3, 0, 3, 3, 1, 1, 4, 1, 1, 2, 3, 2, 4, 0, 3, 2,
                       2, 0, 0, 3, 0, 0, 4, 2, 1, 1, 4, 2, 1, 0, 1, 3, 1, 1, 4, 2, 3, 0,
                       4, 0, 0, 0, 0, 3, 4, 4, 0, 0, 1, 3, 1, 2, 3, 1, 4, 3, 3, 2, 2, 1,
                       1, 2, 2, 4, 2, 0, 4, 3, 2, 1, 4, 0, 2, 4, 0, 1, 2, 0, 4, 1, 4, 3,
                       3, 0, 3, 1, 2, 4, 4, 4, 3, 3, 4, 3],
                      [0, 4, 0, 2, 2, 3, 0, 4, 3, 2, 2, 2, 4, 3, 1, 2, 0, 4, 4, 4, 1, 3,
                       0, 1, 1, 0, 3, 2, 3, 2, 1, 1, 0, 1, 2, 4, 0, 2, 2, 3, 2, 0, 4, 2,
                       0, 3, 4, 1, 0, 1, 0, 1, 0, 2, 0, 2, 4, 4, 3, 2, 1, 1, 3, 1, 3, 4,
                       1, 1, 2, 1, 1, 2, 1, 0, 0, 4, 0, 1, 4, 1, 1, 3, 3, 3, 0, 4, 2, 2,
                       4, 4, 1, 4, 2, 4, 2, 4, 1, 3, 2, 1]])

        y = np.array([1, 2, 3, 4, 5, 6])

        clf = MultinomialNB()

        clf.fit(X, y)

        self.assertTrue(np.equal(clf.predict(X[2:3]), np.array([3])))

        self.assertTrue(all(np.equal(np.round(clf.class_log_prior_, 8), np.array(
            [-1.79175947, -1.79175947, -1.79175947, -1.79175947, -1.79175947, -1.79175947]))))

        self.assertTrue(all(np.equal(np.round(clf.feature_log_prob_[0], 8), np.array(
                [-4.58496748, -4.58496748, -5.68357977, -4.58496748, -4.58496748, -5.68357977, -4.29728541, -5.68357977,
                 -4.07414185, -4.58496748, -4.07414185, -5.68357977, -4.29728541, -4.07414185, -4.58496748, -4.29728541,
                 -4.58496748, -4.07414185, -4.07414185, -4.29728541, -4.07414185, -4.29728541, -4.99043259, -4.07414185,
                 -4.58496748, -5.68357977, -4.29728541, -5.68357977, -4.99043259, -4.29728541, -4.07414185, -4.58496748,
                 -5.68357977, -5.68357977, -4.29728541, -4.29728541, -4.99043259, -4.58496748, -5.68357977, -5.68357977,
                 -4.58496748, -4.07414185, -4.99043259, -4.99043259, -4.58496748, -4.99043259, -5.68357977, -4.58496748,
                 -5.68357977, -4.99043259, -4.99043259, -4.99043259, -5.68357977, -4.99043259, -5.68357977, -4.58496748,
                 -5.68357977, -4.29728541, -4.99043259, -4.58496748, -4.58496748, -4.58496748, -4.58496748, -4.58496748,
                 -4.29728541, -4.99043259, -4.07414185, -4.58496748, -4.58496748, -4.07414185, -4.58496748, -4.58496748,
                 -4.58496748, -4.07414185, -4.07414185, -4.29728541, -4.58496748, -4.58496748, -4.99043259, -4.58496748,
                 -4.58496748, -4.58496748, -4.07414185, -4.58496748, -5.68357977, -5.68357977, -4.58496748, -4.99043259,
                 -4.29728541, -5.68357977, -4.07414185, -4.29728541, -4.58496748, -4.29728541, -4.29728541, -4.29728541,
                 -4.99043259, -4.58496748, -4.58496748, -5.68357977]))))


